Description of plugin system
----------------------------

All plugins belong to configured plugin directory. Recognized suffixes are:

- .py, .pyc, .pyo -- python modules
- .so -- python compatible binary module
- .plugin -- arbitrary executable

Plugin Model
------------
Describe plugin model TODO.


Common stuff for plugins
------------------------

Each plugin exports some steps. The mandatory ones are

- init -- initialize plugin, get environment, ..
- backup -- backup everything we could touch in this plugin
- diagnose -- get info about the investigated system and determine where
              the problems are
- describe -- describe the findings from diagnose step
- fix -- autofix the errors from diagnose step
- restore -- restore system from backup
- destroy -- destroy the plugin, cleanup

The plugin should ensure that the calling order is correct
and the system cannot end in some undeterministic state.

Python modules (both py and binary)
------------------------------------
A plugin for the FirstAidKit must inherite from the tasker.Plugin class.
It must also implement the mandatory plugin steps.  The tasker.Plugin
parent will provide a default flow that will use the functions defined
by the plugin developer.  Moreover, for the mandatory steps, the plugin
developer must garantee that the function will return a valid return 
class (more on return class further on).  In other words, the function
must return one of the possible return classes included in the default
flow.

tasker.Plugin defines:
nextstep() -- This is used to return the next function that should be 
              executed.  __iter__() is not used because there is no 
              control over __iter__() in an iteration.  nextstep()
              allows us execution of the flow without the need for an
              iteration.  However the iteratior is present in the 
              class and can be used accordinly.

__iter__() and next() -- iterator protocol, works in the same way as
                         nextstep() but end with StopIteration exception

actions() -- returns list of available step names
call(step) -- calls one specific step identified by name
info() -- returns tuple of strings defined as (name of plugin, version, author)

And of course the steps itself. They are defined as methods with the same names
as used in actions().

Return Class
------------

Arbitrary executable modules
----------------------------

Still work in progress, but basically the binary is called with step name
as the first parameter. Right now this kind of plugin has to process the
mandatory steps only and ensure it's data integrity by itself.


